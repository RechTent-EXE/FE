import React, { useEffect, useState } from "react";
import * as faceapi from "face-api.js";
import { UserProfile } from "../../types/user";
import { AlertCircle, CheckCircle, RefreshCw, FileSearch } from "lucide-react";
import { toast } from "react-toastify";
import {
  ocrService,
  DocumentValidationResult,
} from "../../services/ocrService";

interface ExtractFaceFromImageProps {
  profile: UserProfile;
  onFaceExtracted: (descriptor: Float32Array) => void;
  onError: (error: string) => void;
}

export const ExtractFaceFromImage = ({
  profile,
  onFaceExtracted,
  onError,
}: ExtractFaceFromImageProps) => {
  const [modelsLoaded, setModelsLoaded] = useState(false);
  const [isExtracting, setIsExtracting] = useState(false);
  const [extractionStatus, setExtractionStatus] = useState<
    "idle" | "loading" | "validating" | "extracting" | "success" | "failed"
  >("idle");
  const [extractionError, setExtractionError] = useState<string | null>(null);
  const [validationResult, setValidationResult] =
    useState<DocumentValidationResult | null>(null);

  // Load face-api models
  useEffect(() => {
    const loadModels = async () => {
      setExtractionStatus("loading");

      try {
        await Promise.all([
          faceapi.nets.ssdMobilenetv1.loadFromUri("/models"),
          faceapi.nets.faceLandmark68Net.loadFromUri("/models"),
          faceapi.nets.faceRecognitionNet.loadFromUri("/models"),
        ]);

        setModelsLoaded(true);
        setExtractionStatus("idle");
      } catch {
        setExtractionStatus("failed");
        setExtractionError("Kh√¥ng th·ªÉ t·∫£i models nh·∫≠n di·ªán khu√¥n m·∫∑t");
        onError("Kh√¥ng th·ªÉ t·∫£i models nh·∫≠n di·ªán khu√¥n m·∫∑t");
      }
    };

    loadModels();
  }, [onError]);

  // Cleanup OCR worker khi component unmount
  useEffect(() => {
    return () => {
      ocrService.terminateWorker();
    };
  }, []);

  const extractFaceFromIdCard = async () => {
    if (!modelsLoaded) {
      const error = "Models ch∆∞a ƒë∆∞·ª£c t·∫£i";
      setExtractionError(error);
      onError(error);
      return;
    }

    setIsExtracting(true);
    setExtractionStatus("validating");
    setExtractionError(null);

    try {
      // X√°c ƒë·ªãnh lo·∫°i gi·∫•y t·ªù v√† l·∫•y ·∫£nh t∆∞∆°ng ·ª©ng
      let idImage: string | null = null;
      let validationResult: DocumentValidationResult;

      // B∆∞·ªõc 1: X√°c minh gi·∫•y t·ªù b·∫±ng OCR
      setExtractionStatus("validating");

      // Ki·ªÉm tra c√≥ b·∫±ng l√°i xe kh√¥ng (∆∞u ti√™n m·∫∑t tr∆∞·ªõc)
      if (
        profile.drivingLicenseFrontImageUrl ||
        profile.drivingLicenseBackImageUrl
      ) {
        idImage =
          profile.drivingLicenseFrontImageUrl ||
          profile.drivingLicenseBackImageUrl;

        if (!idImage) {
          const error = "Kh√¥ng t√¨m th·∫•y ·∫£nh b·∫±ng l√°i xe";
          setExtractionError(error);
          setExtractionStatus("failed");
          onError(error);
          return;
        }

        // Convert image URL to File object for OCR
        const response = await fetch(idImage);
        const blob = await response.blob();
        const imageFile = new File([blob], "driver-license.jpg", {
          type: blob.type,
        });

        // Debug: Log extracted text
        console.log("üîç Starting OCR for driver license...");
        validationResult = await ocrService.validateDriverLicense(
          imageFile,
          profile.fullname || ""
        );
        console.log("üîç OCR Result:", validationResult);
      }
      // Ki·ªÉm tra c√≥ h·ªô chi·∫øu kh√¥ng
      else if (profile.passportFrontImageUrl) {
        idImage = profile.passportFrontImageUrl;

        // Convert image URL to File object for OCR
        const response = await fetch(idImage);
        const blob = await response.blob();
        const imageFile = new File([blob], "passport.jpg", { type: blob.type });

        console.log("üîç Starting OCR for passport...");
        validationResult = await ocrService.validatePassport(
          imageFile,
          profile.fullname || ""
        );
        console.log("üîç OCR Result:", validationResult);
      }
      // M·∫∑c ƒë·ªãnh ki·ªÉm tra CCCD (∆∞u ti√™n m·∫∑t tr∆∞·ªõc)
      else {
        idImage = profile.identityFrontImage || profile.identityBackImage;

        if (!idImage) {
          const error = "Kh√¥ng t√¨m th·∫•y ·∫£nh gi·∫•y t·ªù t√πy th√¢n";
          setExtractionError(error);
          setExtractionStatus("failed");
          onError(error);
          return;
        }

        // Convert image URL to File object for OCR
        const response = await fetch(idImage);
        const blob = await response.blob();
        const imageFile = new File([blob], "cccd.jpg", { type: blob.type });

        console.log("üîç Starting OCR for CCCD...");
        validationResult = await ocrService.validateCCCD(
          imageFile,
          profile.fullname || ""
        );
        console.log("üîç OCR Result:", validationResult);
      }

      setValidationResult(validationResult);

      if (!validationResult.isValid) {
        toast.error(validationResult.errorMessage || "Gi·∫•y t·ªù kh√¥ng h·ª£p l·ªá");
        setExtractionError(
          validationResult.errorMessage || "Gi·∫•y t·ªù kh√¥ng h·ª£p l·ªá"
        );
        setExtractionStatus("failed");
        onError(validationResult.errorMessage || "Gi·∫•y t·ªù kh√¥ng h·ª£p l·ªá");
        return;
      }

      // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng v·ªõi th√¥ng tin chi ti·∫øt
      const documentTypeName =
        validationResult.documentType === "cccd"
          ? "CCCD"
          : validationResult.documentType === "driver_license"
          ? "B·∫±ng l√°i xe"
          : "H·ªô chi·∫øu";

      const documentTitle = validationResult.documentTitle || documentTypeName;

      toast.success(
        `‚úÖ X√°c minh ${documentTypeName} th√†nh c√¥ng!\nüìÑ Lo·∫°i th·∫ª: ${documentTitle}\nüë§ H·ªç t√™n: ${validationResult.extractedName}`
      );

      // B∆∞·ªõc 2: Tr√≠ch xu·∫•t khu√¥n m·∫∑t
      setExtractionStatus("extracting");

      // Create image element
      const img = document.createElement("img");
      img.crossOrigin = "anonymous";

      await new Promise((resolve, reject) => {
        img.onload = () => {
          resolve(null);
        };
        img.onerror = (error) => {
          reject(error);
        };
        img.src = idImage;
      });

      // Detect face and extract descriptor
      const detection = await faceapi
        .detectSingleFace(img)
        .withFaceLandmarks()
        .withFaceDescriptor();

      if (!detection) {
        const error =
          "Kh√¥ng th·ªÉ ph√°t hi·ªán khu√¥n m·∫∑t tr√™n gi·∫•y t·ªù t√πy th√¢n. Vui l√≤ng ƒë·∫£m b·∫£o ·∫£nh r√µ n√©t v√† c√≥ ch·ª©a khu√¥n m·∫∑t.";
        setExtractionError(error);
        setExtractionStatus("failed");
        onError(error);
        return;
      }

      setExtractionStatus("success");
      setExtractionError(null);
      toast.success("‚úÖ Tr√≠ch xu·∫•t khu√¥n m·∫∑t th√†nh c√¥ng!");
      onFaceExtracted(detection.descriptor);
    } catch {
      const errorMsg = "L·ªói khi x·ª≠ l√Ω ·∫£nh gi·∫•y t·ªù t√πy th√¢n";
      setExtractionError(errorMsg);
      setExtractionStatus("failed");
      onError(errorMsg);
    } finally {
      setIsExtracting(false);
    }
  };

  const hasIdImages = profile.identityFrontImage || profile.identityBackImage;

  return (
    <div className="bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-200 rounded-2xl p-6">
      <h4 className="text-xl font-bold text-gray-900 mb-4">
        B∆∞·ªõc 1: Tr√≠ch xu·∫•t khu√¥n m·∫∑t t·ª´ gi·∫•y t·ªù t√πy th√¢n
      </h4>

      <div className="space-y-4">
        {/* Status Display */}
        <div className="bg-white rounded-xl p-4 border border-gray-200">
          {extractionStatus === "loading" && (
            <div className="flex items-center gap-3 text-blue-600">
              <RefreshCw className="animate-spin" size={20} />
              <span>ƒêang t·∫£i models nh·∫≠n di·ªán khu√¥n m·∫∑t...</span>
            </div>
          )}

          {extractionStatus === "idle" && modelsLoaded && (
            <div className="flex items-center gap-3 text-green-600">
              <CheckCircle size={20} />
              <span>
                Models ƒë√£ s·∫µn s√†ng. C√≥ th·ªÉ b·∫Øt ƒë·∫ßu tr√≠ch xu·∫•t khu√¥n m·∫∑t.
              </span>
            </div>
          )}

          {extractionStatus === "validating" && (
            <div className="space-y-2">
              <div className="flex items-center gap-3 text-blue-600">
                <FileSearch className="animate-pulse" size={20} />
                <span>ƒêang x√°c minh gi·∫•y t·ªù b·∫±ng OCR...</span>
              </div>
              <div className="text-sm text-gray-600 bg-blue-50 p-2 rounded-lg">
                üîç Tesseract.js ƒëang ph√¢n t√≠ch vƒÉn b·∫£n trong ·∫£nh...
                <br />
                üìÑ Ki·ªÉm tra lo·∫°i gi·∫•y t·ªù v√† so s√°nh t√™n v·ªõi h·ªì s∆°
                <br />
                ‚è±Ô∏è Qu√° tr√¨nh n√†y c√≥ th·ªÉ m·∫•t 10-30 gi√¢y
              </div>
            </div>
          )}

          {extractionStatus === "extracting" && (
            <div className="flex items-center gap-3 text-blue-600">
              <RefreshCw className="animate-spin" size={20} />
              <span>ƒêang tr√≠ch xu·∫•t khu√¥n m·∫∑t t·ª´ gi·∫•y t·ªù t√πy th√¢n...</span>
            </div>
          )}

          {extractionStatus === "success" && (
            <div className="space-y-2">
              <div className="flex items-center gap-3 text-green-600">
                <CheckCircle size={20} />
                <span>
                  ‚úÖ Tr√≠ch xu·∫•t khu√¥n m·∫∑t th√†nh c√¥ng! C√≥ th·ªÉ ti·∫øn h√†nh x√°c minh.
                </span>
              </div>
              {validationResult && validationResult.isValid && (
                <div className="text-sm text-gray-600 bg-green-50 p-2 rounded-lg">
                  üìÑ ƒê√£ x√°c minh gi·∫•y t·ªù:{" "}
                  {validationResult.documentType === "cccd"
                    ? "CCCD"
                    : validationResult.documentType === "driver_license"
                    ? "B·∫±ng l√°i xe"
                    : "H·ªô chi·∫øu"}
                  <br />
                  üè∑Ô∏è T√™n th·∫ª ƒë∆∞·ª£c ph√°t hi·ªán:{" "}
                  {validationResult.documentTitle || "Kh√¥ng ph√°t hi·ªán"}
                  <br />
                  üë§ T√™n tr√™n gi·∫•y t·ªù: {validationResult.extractedName}
                  <br />
                  üìä ƒê·ªô tin c·∫≠y OCR: {Math.round(validationResult.confidence)}%
                </div>
              )}
            </div>
          )}

          {extractionStatus === "failed" && extractionError && (
            <div className="flex items-start gap-3 text-red-600">
              <AlertCircle size={20} className="flex-shrink-0 mt-0.5" />
              <div>
                <p className="font-medium">Tr√≠ch xu·∫•t th·∫•t b·∫°i</p>
                <p className="text-sm mt-1">{extractionError}</p>
              </div>
            </div>
          )}
        </div>

        {/* ID Images Display */}
        <div className="bg-white rounded-xl p-4 border border-gray-200">
          <h5 className="font-semibold text-gray-900 mb-3">
            ·∫¢nh gi·∫•y t·ªù t√πy th√¢n
          </h5>
          <div className="grid grid-cols-2 gap-4">
            {profile.identityFrontImage && (
              <div>
                <p className="text-sm text-gray-600 mb-2">M·∫∑t tr∆∞·ªõc</p>
                <img
                  src={profile.identityFrontImage}
                  alt="CCCD Front"
                  className="w-full h-32 object-contain rounded-lg border"
                />
              </div>
            )}
            {profile.identityBackImage && (
              <div>
                <p className="text-sm text-gray-600 mb-2">M·∫∑t sau</p>
                <img
                  src={profile.identityBackImage}
                  alt="CCCD Back"
                  className="w-full h-32 object-contain rounded-lg border"
                />
              </div>
            )}
          </div>

          {!hasIdImages && (
            <div className="text-center py-8 text-gray-500">
              <p>Ch∆∞a c√≥ ·∫£nh gi·∫•y t·ªù t√πy th√¢n</p>
              <p className="text-sm">
                Vui l√≤ng t·∫£i l√™n ·∫£nh CCCD ƒë·ªÉ ti·∫øn h√†nh tr√≠ch xu·∫•t khu√¥n m·∫∑t
              </p>
            </div>
          )}
        </div>

        {/* Extract Button */}
        <button
          onClick={extractFaceFromIdCard}
          disabled={
            !modelsLoaded ||
            !hasIdImages ||
            isExtracting ||
            extractionStatus === "success"
          }
          className={`w-full py-3 px-6 rounded-xl font-medium transition-all ${
            !modelsLoaded ||
            !hasIdImages ||
            isExtracting ||
            extractionStatus === "success"
              ? "bg-gray-200 text-gray-500 cursor-not-allowed"
              : "bg-blue-600 text-white hover:bg-blue-700 active:bg-blue-800"
          }`}
        >
          {isExtracting ? (
            <div className="flex items-center justify-center gap-2">
              <RefreshCw className="animate-spin" size={16} />
              <span>ƒêang tr√≠ch xu·∫•t...</span>
            </div>
          ) : extractionStatus === "success" ? (
            "‚úÖ ƒê√£ tr√≠ch xu·∫•t th√†nh c√¥ng"
          ) : (
            "Tr√≠ch xu·∫•t khu√¥n m·∫∑t t·ª´ gi·∫•y t·ªù"
          )}
        </button>

        {extractionStatus === "success" && (
          <div className="bg-green-50 border border-green-200 rounded-xl p-4">
            <div className="flex items-center gap-2 text-green-700">
              <CheckCircle size={16} />
              <span className="font-medium">Tr√≠ch xu·∫•t th√†nh c√¥ng!</span>
            </div>
            <p className="text-sm text-green-600 mt-1">
              D·ªØ li·ªáu khu√¥n m·∫∑t ƒë√£ ƒë∆∞·ª£c tr√≠ch xu·∫•t t·ª´ gi·∫•y t·ªù t√πy th√¢n. B·∫°n c√≥
              th·ªÉ ti·∫øn h√†nh b∆∞·ªõc x√°c minh khu√¥n m·∫∑t.
            </p>
          </div>
        )}
      </div>
    </div>
  );
};
